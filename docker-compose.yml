version: "3.8"
services:
  # 1) 沙箱镜像的构建服务
  #   - 只为构建 "my-runner-image:latest" 而存在，不做实际的常驻服务。
  #   - 如果你不想真的跑它，可以用 `command: tail -f /dev/null`，保持容器不退出。
  sandbox-runner:
    build:
      context: ./sandbox-image
      dockerfile: Dockerfile
    image: my-runner-image:latest   # 指定镜像名
    container_name: my-sandbox-container
    command: [ "tail", "-f", "/dev/null" ]  # 保持前台挂起，不退出
    networks:
      - app-network

  # 2) 后端 (Spring Boot) 容器
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: my-backend-container
    # 挂载宿主机 /var/run/docker.sock 到容器
    volumes:
      # 允许后端容器内的应用（Spring Boot）与宿主机的 Docker 守护进程通信，进而管理和启动其他 Docker 容器（即沙箱环境）。
      - /var/run/docker.sock:/var/run/docker.sock
      # 把宿主机项目下的 tempfiles 映射到容器的 /mytemp
      # 在 Docker 中，挂载卷（Volumes） 是宿主机和容器之间共享文件和目录的一种机制。
      # 通过挂载卷，容器内的应用可以访问宿主机上的文件系统，而无需关心宿主机的具体路径。
      - ./tempfiles:/mytemp
    environment:
      # 关键：通过 ${PWD} 传递 "宿主机上" tempfiles 的绝对路径
      - HOST_TEMPFILES_ROOT=${PWD}/tempfiles
    depends_on:
      - sandbox-runner
    networks:
      - app-network


  # 3) 前端 (React / build 后)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: my-frontend-container
    depends_on:
      - backend
    networks:
      - app-network

  # 4) Nginx
  nginx:
    image: nginx:alpine
    container_name: my-nginx-container
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"   # 外部访问80端口(HTTP)
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
